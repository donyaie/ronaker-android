apply plugin: 'com.onesignal.androidsdk.onesignal-gradle-plugin'

apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: 'io.fabric'

apply plugin: 'com.google.firebase.firebase-perf'

apply plugin: 'com.google.gms.google-services'


def versionMajor = 0
def versionMinor = 1
def versionPatch = 0
android {



    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
    compileSdkVersion 30
    buildToolsVersion = '29.0.3'



    buildFeatures {
        dataBinding = true
    }

    testOptions.unitTests {
        includeAndroidResources = true
    }

    // Add for using latest experimental build of Android Extensions
    androidExtensions {
        experimental = true
    }

    signingConfigs {



        release {
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD

            v1SigningEnabled true
            v2SigningEnabled true

            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
        }


        debug {

            keyAlias DEBUG_KEY_ALIAS
            keyPassword DEBUG_KEY_PASSWORD


            storeFile file(DEBUG_STORE_FILE)
            storePassword DEBUG_STORE_PASSWORD
        }
    }

    defaultConfig {
        applicationId "com.ronaker.app"
        resConfigs "en", "lt", "nl"
        versionCode versionMajor * 10000+ versionMinor * 100+ versionPatch
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        minSdkVersion 21
        targetSdkVersion 30
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        manifestPlaceholders = [
                onesignal_app_id               : ONESIGNAL_APP_ID,
                // Project Checkout pulled from dashboard, local value is ignored.
                onesignal_google_project_number: 'REMOTE'
        ]


        setProperty("archivesBaseName", "ronaker-${defaultConfig.versionName}")

    }





    buildTypes {
        release {


            resValue "string", "app_version", "${defaultConfig.versionName}"

            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

        }

        debug {

            versionNameSuffix ".debug"
            resValue "string", "app_version", "${defaultConfig.versionName}${versionNameSuffix}"

            minifyEnabled false
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'


        }
    }


    bundle {
        language {
            // Specifies that the app bundle should not support
            // configuration APKs for language resources. These
            // resources are instead packaged with each base and
            // dynamic feature APK.
            enableSplit = false
        }
    }


}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.aar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutinesCore"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinCoroutines"

    implementation "androidx.multidex:multidex:$multidexVersion"
    implementation "androidx.appcompat:appcompat:$androidxCompatVersion"
    implementation "androidx.core:core-ktx:$androidCorexVersion"
    implementation "androidx.preference:preference-ktx:$androidxVersion"
    // RecyclerView
    implementation "androidx.recyclerview:recyclerview:$recyclerviewVersion"

    // Constraint Layout
    implementation "androidx.constraintlayout:constraintlayout:$constraintlayoutVersion"

    // LiveData & ViewModel
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycleVersion"

    implementation "com.google.android.material:material:$materialVersion"

    // Data binding
    kapt "com.android.databinding:compiler:$databindingVersion"

    // Retrofit
    implementation("com.squareup.retrofit2:retrofit:$retrofit_version")
            {
                // exclude Retrofitâ€™s OkHttp peer-dependency module and define your own module import
//                exclude module: 'okhttp'

                exclude group: "com.squareup.okhttp3", module: "okhttp"
            }

    implementation "com.scottyab:secure-preferences-lib:$securePreferencesVersion"

    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

    //noinspection GradleDependency
    implementation "com.squareup.okhttp3:okhttp:$okhttpVersion"
    //noinspection GradleDependency
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttpVersion"


    // Dagger 2
    implementation "com.google.dagger:dagger:$dagger2_version"
    kapt "com.google.dagger:dagger-compiler:$dagger2_version"



    compileOnly "org.glassfish:javax.annotation:$annotationVersion"

    implementation "com.wang.avi:library:$aviVersion"

    //calligraphy3 font library
    implementation "io.github.inflationx:calligraphy3:$calligraphyVersion"
    implementation "io.github.inflationx:viewpump:$viewpumpVersion"

    //Rx
    implementation "io.reactivex.rxjava2:rxjava:$rxjavaVersion"
    implementation "io.reactivex.rxjava2:rxandroid:$rxandroidVersion"

    // RxBindig
    implementation "com.jakewharton.rxbinding2:rxbinding:$rxbindingVersion"
    implementation "com.jakewharton.rxbinding2:rxbinding-kotlin:$rxbindingVersion"


    //fragment stack manager
    implementation "com.ncapdevi:frag-nav:$fragNavVersion"

    //Image Loader
    implementation "com.github.bumptech.glide:glide:$glideVersion"

    kapt "com.github.bumptech.glide:compiler:$glideVersion"

    implementation("com.github.bumptech.glide:okhttp3-integration:$glideVersion") {
        exclude group: 'glide-parent'
    }

    implementation "com.google.android.gms:play-services-maps:$playServicesVersion"

    implementation "com.google.android.gms:play-services-location:$playServicesVersion"

    //dexter permissions
    implementation "com.karumi:dexter:$dexterVersion"

    // crop
    implementation "com.github.yalantis:ucrop:$ucropVersion"


    // rounded image view
    implementation "com.makeramen:roundedimageview:$roundedImageVersion"

    //Checkout

    implementation "com.hbb20:ccp:$ccpVersion"
    implementation "com.googlecode.libphonenumber:libphonenumber:$libphonenumberVersion"


    implementation("com.alimuzaffar.lib:pinentryedittext:$pinentryEditTextVersion") {
        // Exclude is only needed if you already have
        // androidx.appcompat as a dependency in your app.
        exclude group: "androidx.appcompat", module: "appcompat"
    }


    //firebace
    implementation "com.google.firebase:firebase-messaging:$firebaseMessagingVersion"
    implementation "com.google.firebase:firebase-appindexing:$firebaseAppindexingVersion"
    implementation "com.google.firebase:firebase-core:$firebaseVersion"
    implementation "com.google.firebase:firebase-analytics:$firebaseVersion"
    implementation "com.google.firebase:firebase-invites:$firebaseInvitesVersion"
    implementation "com.google.firebase:firebase-perf:$firebasePerf"

    // Add dependency
    implementation "com.crashlytics.sdk.android:crashlytics:$crashlyticsVersion"
    
    //Alert
    implementation "com.irozon.sneaker:sneaker:$sneakerVersion"

    //picker
//    implementation project(path: ":rangedatepicker")
    implementation 'com.savvi.datepicker:rangepicker:1.3.0'

    implementation "me.imid.swipebacklayout.lib:library:$swipebackVersion"


    implementation "com.onesignal:OneSignal:$oneSignalVersion"

    implementation "com.facebook.stetho:stetho:$stethoVersion"
    implementation "com.facebook.stetho:stetho-okhttp3:$stethoVersion"

//    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.0'

    implementation "io.branch.sdk.android:library:$branchVersion"

//    implementation 'com.github.barteksc:android-pdf-viewer:3.2.0-beta.1'

    // Testing code should not be included in the main code.
    // Once https://issuetracker.google.com/128612536 is fixed this can be fixed.
    debugImplementation "androidx.fragment:fragment-testing:$fragmentVersion"
    implementation "androidx.test:core:$androidXTestCoreVersion"


    //implementation
    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.hamcrest:hamcrest-all:$hamcrestVersion"
    testImplementation "androidx.arch.core:core-testing:$archTestingVersion"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"

    // AndroidX Test - JVM testing
    testImplementation "androidx.test:core-ktx:$androidXTestCoreVersion"
    testImplementation "androidx.test.ext:junit:$androidXTestExtKotlinRunnerVersion"

    testImplementation "org.mockito:mockito-core:${mockito_version}"

    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoCoreVersion"

    androidTestImplementation "androidx.test:runner:$testRunnerVersion"
    androidTestImplementation "androidx.test:rules:$testRunnerVersion"
    androidTestImplementation "androidx.test:core:$testRunnerVersion"
    androidTestImplementation "androidx.test:monitor:$testRunnerVersion"


    // For instrumentation tests on Android devices and emulators
    androidTestImplementation "org.mockito:mockito-android:$mockito_version"

    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"

}
